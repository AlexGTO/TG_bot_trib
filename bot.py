import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
from datetime import datetime, timedelta
import sqlite3
import openpyxl
from openpyxl import Workbook
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NAME, PHONE, COMPANY, REQUEST = range(4)
ADMIN_MENU, SEND_MESSAGE, SELECT_RECIPIENTS, SCHEDULE, CONFIRM_SEND = range(4, 9)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('consultations.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        company TEXT,
        request TEXT,
        registration_date TEXT,
        is_active INTEGER DEFAULT 1,
        last_activity TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS admins (
        admin_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT,
        is_superadmin INTEGER DEFAULT 0
    )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    conn = sqlite3.connect('consultations.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM admins WHERE admin_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def is_superadmin(user_id):
    conn = sqlite3.connect('consultations.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_superadmin FROM admins WHERE admin_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
def add_user(user_data):
    conn = sqlite3.connect('consultations.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR REPLACE INTO users 
    (user_id, username, first_name, last_name, phone, company, request, registration_date, is_active, last_activity)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, ?)
    ''', (
        user_data['user_id'],
        user_data.get('username'),
        user_data.get('first_name'),
        user_data.get('last_name'),
        user_data.get('phone'),
        user_data.get('company'),
        user_data.get('request'),
        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    ))
    
    conn.commit()
    conn.close()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = {
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    add_user(user_data)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –¢—Ä–∏–±—É–Ω—Å–∫–æ–≥–æ. ü§ù\n"
        "–í—ã —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π —à–∞–≥, —á—Ç–æ–±—ã –∫–∞—á–Ω—É—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å. –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å –∏ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ, "
        "—á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ–π.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    
    keyboard = [
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É –ª–∏—á–Ω–æ", url="https://t.me/username")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    return COMPANY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
async def get_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['company'] = update.message.text
    
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:")
    return REQUEST

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def get_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['request'] = update.message.text
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data = {
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'phone': context.user_data['phone'],
        'company': context.user_data['company'],
        'request': context.user_data['request']
    }
    add_user(user_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    await notify_managers(context, user_data)
    
    # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É –ª–∏—á–Ω–æ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É", url="https://t.me/username")]
        ])
    )
    
    return ConversationHandler.END

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async def notify_managers(context, user_data):
    conn = sqlite3.connect('consultations.db')
    cursor = conn.cursor()
    cursor.execute('SELECT admin_id FROM admins WHERE is_superadmin = 0')
    managers = cursor.fetchall()
    conn.close()
    
    message_text = (
        "üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:\n\n"
        f"üë§ –ò–º—è: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_data['company']}\n"
        f"üìù –ó–∞–ø—Ä–æ—Å: {user_data['request']}\n\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['user_id']}"
    )
    
    for manager in managers:
        try:
            await context.bot.send_message(
                chat_id=manager[0],
                text=message_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tg://user?id={user_data['user_id']}")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager[0]}: {e}")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", callback_data="export")],
        [InlineKeyboardButton("üì© –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast")],
    ]
    
    if is_superadmin(update.effective_user.id):
        keyboard.append([InlineKeyboardButton("üë®‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "stats":
        await show_stats(update, context)
    elif query.data == "export":
        await export_to_excel(update, context)
    elif query.data == "broadcast":
        await start_broadcast(update, context)
    elif query.data == "add_admin":
        await add_admin(update, context)
    
    return ADMIN_MENU

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('consultations.db')
    cursor = conn.cursor()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime('%Y-%m-%d')
    cursor.execute('SELECT COUNT(*) FROM users WHERE date(registration_date) = ?', (today,))
    today_users = cursor.fetchone()[0]
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ
    cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 1')
    active_users = cursor.fetchone()[0]
    
    # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
    cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 0')
    inactive_users = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üÜï –°–µ–≥–æ–¥–Ω—è: {today_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_users}\n"
        f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {inactive_users}"
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=stats_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

# –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel
async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('consultations.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users')
    users = cursor.fetchall()
    conn.close()
    
    wb = Workbook()
    ws = wb.active
    ws.title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = [
        "ID", "Username", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", 
        "–ö–æ–º–ø–∞–Ω–∏—è", "–ó–∞–ø—Ä–æ—Å", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–ê–∫—Ç–∏–≤–µ–Ω", "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    ]
    ws.append(headers)
    
    # –î–∞–Ω–Ω—ã–µ
    for user in users:
        ws.append(user)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    wb.save(filename)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=open(filename, 'rb'),
        caption="–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

# –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all")],
        [InlineKeyboardButton("–ù–æ–≤—ã–º (–∑–∞ –Ω–µ–¥–µ–ª—é)", callback_data="broadcast_new")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_RECIPIENTS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
async def select_recipients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "broadcast_all":
        context.user_data['broadcast_type'] = 'all'
    elif query.data == "broadcast_new":
        context.user_data['broadcast_type'] = 'new'
    elif query.data == "back":
        await admin_panel(update, context)
        return ADMIN_MENU
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    return SEND_MESSAGE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def get_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        context.user_data['broadcast_photo'] = update.message.photo[-1].file_id
        context.user_data['broadcast_text'] = update.message.caption or ""
    else:
        context.user_data['broadcast_text'] = update.message.text
    
    keyboard = [
        [InlineKeyboardButton("–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ", callback_data="schedule_now")],
        [InlineKeyboardButton("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_later")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await update.message.reply_text(
        "–ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SCHEDULE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async def schedule_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "schedule_now":
        context.user_data['schedule_time'] = 'now'
        await confirm_broadcast(update, context)
        return CONFIRM_SEND
    elif query.data == "schedule_later":
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–ú–°–ö):"
        )
        return SCHEDULE
    elif query.data == "back":
        await start_broadcast(update, context)
        return SELECT_RECIPIENTS

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
async def confirm_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('schedule_time') == 'later':
        try:
            date_str = update.message.text
            date_obj = datetime.strptime(date_str, '%d.%m.%Y %H:%M')
            context.user_data['schedule_time'] = date_obj
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return SCHEDULE
    
    broadcast_type = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" if context.user_data['broadcast_type'] == 'all' else "–Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∑–∞ –Ω–µ–¥–µ–ª—é)"
    schedule_time = "–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ" if context.user_data['schedule_time'] == 'now' else f"–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {context.user_data['schedule_time'].strftime('%d.%m.%Y %H:%M')}"
    
    confirm_text = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
        f"üîπ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {broadcast_type}\n"
        f"‚è∞ –í—Ä–µ–º—è: {schedule_time}\n\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    
    if 'broadcast_photo' in context.user_data:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=context.user_data['broadcast_photo'],
            caption=f"{confirm_text}\n{context.user_data['broadcast_text']}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_send")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_send")]
            ])
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{confirm_text}\n{context.user_data['broadcast_text']}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_send")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_send")]
            ])
        )
    return CONFIRM_SEND

# –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_send":
        conn = sqlite3.connect('consultations.db')
        cursor = conn.cursor()
        
        if context.user_data['broadcast_type'] == 'all':
            cursor.execute('SELECT user_id FROM users WHERE is_active = 1')
        else:
            week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d %H:%M:%S')
            cursor.execute('SELECT user_id FROM users WHERE is_active = 1 AND registration_date >= ?', (week_ago,))
        
        users = cursor.fetchall()
        conn.close()
        
        success = 0
        failed = 0
        
        for user in users:
            try:
                if 'broadcast_photo' in context.user_data:
                    await context.bot.send_photo(
                        chat_id=user[0],
                        photo=context.user_data['broadcast_photo'],
                        caption=context.user_data['broadcast_text'],
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É", url="https://t.me/username")]
                        ])
                    )
                else:
                    await context.bot.send_message(
                        chat_id=user[0],
                        text=context.user_data['broadcast_text'],
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É", url="https://t.me/username")]
                        ])
                    )
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                failed += 1
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                conn = sqlite3.connect('consultations.db')
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET is_active = 0 WHERE user_id = ?', (user[0],))
                conn.commit()
                conn.close()
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back")]
            ])
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back")]
            ])
        )
    
    return ADMIN_MENU

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_superadmin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return ADMIN_MENU
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
async def process_new_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.forward_from:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return ADMIN_MENU
    
    new_admin = update.message.forward_from
    
    conn = sqlite3.connect('consultations.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO admins (admin_id, username, full_name) VALUES (?, ?, ?)', 
                  (new_admin.id, new_admin.username, f"{new_admin.first_name} {new_admin.last_name}"))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin.username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back")]
        ])
    )
    return ADMIN_MENU

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token("7729706158:AAFgUHY62JHT65caVu1vZWlTjG69t69C8Wo").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_company)],
            REQUEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_request)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_handler = ConversationHandler(
        entry_points=[CommandHandler('admin', admin_panel)],
        states={
            ADMIN_MENU: [CallbackQueryHandler(button_handler)],
            SELECT_RECIPIENTS: [CallbackQueryHandler(select_recipients)],
            SEND_MESSAGE: [MessageHandler(filters.TEXT | filters.PHOTO, get_broadcast_message)],
            SCHEDULE: [
                CallbackQueryHandler(schedule_broadcast),
                MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_broadcast)
            ],
            CONFIRM_SEND: [CallbackQueryHandler(send_broadcast)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(admin_handler)
    application.add_handler(MessageHandler(filters.FORWARD & filters.USER, process_new_admin))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
